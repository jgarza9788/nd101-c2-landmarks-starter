Net(
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (fc1): Linear(in_features=16384, out_features=256, bias=True)
  (fc2): Linear(in_features=256, out_features=128, bias=True)
  (fc3): Linear(in_features=128, out_features=50, bias=True)
  (dropout): Dropout(p=0.2, inplace=False)
)

    def forward(self, x):
        ## Define forward behavior

        x = self.conv1(x)
        x = F.leaky_relu(x)
        x = self.pool(x)

        x = self.conv2(x)
        x = F.leaky_relu(x)
        x = self.pool(x)

        x = self.conv3(x)
        x = F.leaky_relu(x)
        x = self.pool(x)

        # x = self.conv4(x)
        # x = self.pool(x)
        # x = F.leaky_relu(x)

        x = x.view(x.size(0),-1)
        
        if self.printed_x == False:
            print('x.shape: ',x.shape) 
            self.printed_x = True
        #needed to find the correct shape for line ^24

        x = self.dropout(x)
        x = F.leaky_relu(self.fc1(x),negative_slope=0.2)
        x = self.dropout(x)
        x = F.leaky_relu(self.fc2(x),negative_slope=0.2)
        x = self.dropout(x)
        x = F.leaky_relu(self.fc3(x),negative_slope=0.2)

        # x = F.relu(self.fc2(x))
        x = F.log_softmax(x,dim=1)

        return x


Test Loss: 3.205295

Test Accuracy: 28% (144/501)